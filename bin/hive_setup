#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'terminal-table'
require 'etc'

if ARGV.length < 1
  puts "Usage:"
  puts
  puts "  hive_setup <directory>"
  exit 1
end

headless = ARGV.include?("--ni")

dir = File.expand_path('', ARGV[0])
if Dir.exists?(dir)
  if ! Dir["#{dir}/*"].empty?
    puts "Directory '#{dir}' exists and is not empty"
    exit 1
  end
else
  if File.exists?(dir)
    puts "'#{dir}' exists and is not a directory"
    exit 1
  end
  FileUtils.mkdir_p(dir)
end

def yn question
  yn = 'x'
  while yn !~ /^[yYnN]/
    print "#{question}(y/n) "
    yn = STDIN.gets.chomp
  end
  yn =~ /^[yY]/
end

def os
  if /mswin/ =~ RUBY_PLATFORM
    'Windows'
  elsif /darwin/ =~ RUBY_PLATFORM
    'Mac'
  elsif /linux/ =~ RUBY_PLATFORM
    'Linux'
  else
    'Unknown'
  end
end

def find_ruby use_default = false
  ruby_versions = []

  manager = nil
  if system("which rvm > /dev/null 2> /dev/null")
    list = `rvm list`.split /\n/
    match = /^.(.).(ruby-\S+)/
  elsif system("which rbenv > /dev/null 2> /dev/null")
    list = `rbenv versions`.split /\n/
    match = /^(.).(\S+)/
  else
    return ['system', 1]
  end

  version_table = Terminal::Table.new headings: ['#', 'Version', '']
  default = nil
  list.each do |line|
    if line =~ match
      default = ruby_versions.length if $1 == '*'
      ruby_versions << $2
      version_table.add_row [ ruby_versions.length, $2, $1 == '*' ? 'Default' : '' ]
    end
  end

  if ruby_versions.length == 0
    [ 'system', 0 ]
  elsif ruby_versions.length == 1
    [ ruby_versions[0], 1 ]
  elsif use_default && ! default.nil?
    [ ruby_versions[default], ruby_versions.length ]
  else
    puts
    puts 'Multiple ruby versions available:'
    puts version_table
    puts ''
    opt = -1
    while opt <= 0 || opt > ruby_versions.length
      print "[1 - #{ruby_versions.length}] > "
      opt = STDIN.gets.chomp.to_i
    end
    [ ruby_versions[opt-1], ruby_versions.length ]
  end
end

def gather_options
  # Choose options
  opt = ''
  mods = []
  ruby, nrubies = find_ruby true
  daemons = false

  while opt.upcase != 'X'
    table = Terminal::Table.new headings: ['Device', 'Module', 'Source']
    mods.each do |mod|
      table.add_row [
        mod[:device],
        mod[:name],
        mod.has_key?(:git_account) ?
          "git@github.com:#{mod[:git_account]}/#{mod[:name]}" :
          "https://rubygems.org/gems/#{mod[:name]}"
      ]
    end

    puts ''
    puts table
    puts "Operating System: #{os}"
    puts "Set up daemon script: #{daemons ? 'Yes (requires admin access)' : 'No'}"
    print "Ruby version: #{ruby}"
    print " (#{nrubies} versions available)" if nrubies > 1
    puts ''
    puts ''
    puts '1) Add module'
    puts '2) Change ruby version'
    if os != 'Unknown'
      puts "3) #{ daemons ? 'Do not s' : 'S'}et up daemon script (experimental)"
    end
    puts 'X) Continue'
    puts ''
    print "> "
    opt = STDIN.gets.chomp

    case opt
    when '1'
      mod = {}
      puts ''
      print "Module name: "
      mod[:device] = STDIN.gets.chomp
      mod[:name] = "hive-runner-#{mod[:device]}"
      puts ''

      puts "Module '#{mod[:name]}' from https://rubygems.org/gems/#{mod[:name]}"
      if yn "Correct? "
        mods << mod
      end
    when '2'
      ruby, nrubies = find_ruby
    when '3'
      daemons = ! daemons if os != 'Unknown'
    end
  end

  {
    mods: mods,
    daemons: daemons,
    ruby: ruby
  }
end

def setup_hive(options)
  dir = options[:dir]
  mods = options[:mods]
  daemons = options[:daemons]
  ruby = options[:ruby] || 'system'

  FileUtils.mkdir_p("#{dir}/config")
  FileUtils.mkdir_p("#{dir}/log")
  FileUtils.mkdir_p("#{dir}/pids")
  FileUtils.mkdir_p("#{dir}/workspaces")

  File.open("#{dir}/config/settings.yml", 'w') do |f|
    f.puts "#{ENV['HIVE_ENVIRONMENT'] || 'test'}:"
    f.puts '  daemon_name: HIVE'
    f.puts ''
    f.puts '  controllers:'
    f.puts '    shell:'
    f.puts '      # Number of shell workers to allocate'
    f.puts '      workers: 5'
    f.puts '      # Queue for each shell worker'
    f.puts '      queues:'
    f.puts '        - bash'
    f.puts '      # Number of ports to allocate to each shell worker'
    f.puts '      port_range_size: 50'
    f.puts '      name_stub: SHELL_WORKER'
    mods.each do |m|
      f.puts "    #{m[:device]}:"
      f.puts "      # Number of ports to allocate to each #{m[:device]} worker"
      f.puts '      port_range_size: 50'
      f.puts "      name_stub: #{m[:device].upcase}_WORKER"
    end
    f.puts ''
    f.puts '  # Range of ports to be made available to workers'
    f.puts '  ports:'
    f.puts '    minimum: 4000'
    f.puts '    maximum: 5000'
    f.puts ''
    f.puts '  # Logging configuration'
    f.puts '  logging:'
    f.puts "    directory: <%=ENV['HIVE_RUNNER_PATH'] || '#{dir}' %>/log"
    f.puts "    pids: <%=ENV['HIVE_RUNNER_PATH'] || '#{dir}' %>/pids"
    f.puts '    main_filename: hive.log'
    f.puts '    main_level: INFO'
    f.puts '    worker_level: INFO'
    f.puts "    home: <%=ENV['HIVE_RUNNER_PATH'] || '#{dir}' %>/workspaces"
    f.puts '    homes_to_keep: 5'
    f.puts '    #hm_logs_to_delete: info'
    f.puts ''
    f.puts '  # Timing configuration'
    f.puts '  timings:'
    f.puts '    worker_loop_interval: 5'
    f.puts '    controller_loop_interval: 5'
    f.puts ''
    f.puts '  # Configuration for various network options'
    f.puts '  network:'
    f.puts "    scheduler: <%=ENV['HIVE_CI_URL'] || 'http://localhost:3000' %>"
    f.puts "    #hive_mind: <%=ENV['HIVE_MIND_URL'] || 'http://localhost:3001' %>"
    f.puts '    # Optional cert paths:'
    f.puts '    # cert: /path/to/certificate.pem'
    f.puts '    # cafile: /path/to/certificate-authorities.pem'
    f.puts ''
    f.puts '  # Configuration for diagnostic plugins'
    f.puts '  diagnostics:'
    f.puts '    hive:'
    f.puts '      load_warning: 0.7'
    f.puts '      load_error: 1.5'
  end

  File.open("#{dir}/Gemfile", 'w') do |f|
    f.puts "source 'https://rubygems.org/'"
    f.puts ""
    f.puts "gem 'hive-runner'"
    mods.each do |m|
      source = m.has_key?(:git_account) ? ", git: 'git@github.com:#{m[:git_account]}/#{m[:name]}'" : ''
      f.puts "gem '#{m[:name]}'#{source}"
    end
  end

  puts '=========================='
  print "Setting ruby ... "
  File.open("#{dir}/.ruby-version", 'w') do |rv|
    rv.write ruby
  end
  print "SUCCESS\n"

  print "Creating daemon startup script ... "
  if daemons
    if os == 'Linux'
      startup_script = "#{dir}/hived.init"
      config_file = "#{dir}/hived.conf"
      write_logs = '> $LOG_DIRECTORY/hived.out 2> $LOG_DIRECTORY/hived.err'
      File.open("#{dir}/start_hive.sh", 'w', 0755) do |f|
        f.write "#!/bin/bash -li\n"

        f.write "if [ -f /etc/hived.conf ]\n"
        f.write "then\n"
        f.write "  . /etc/hived.conf\n"
        f.write "else\n"
        f.write "  . #{config_file}\n"
        f.write "fi\n"

        f.write "cd $HIVE_HOME #{write_logs}\n"
        f.write "start_hive -p $PIDFILE #{write_logs} &\n"
        f.write "echo $!\n"
      end

      FileUtils.cp(File.expand_path('../init.d.hived', __FILE__), startup_script)

      File.open(config_file, 'w') do |conf|
        conf.write "HIVE_HOME=#{dir}\n"
        conf.write "USER=#{Etc.getlogin}\n"
        conf.write "LOG_DIRECTORY=#{dir}/log\n"
        conf.write "PIDFILE=#{dir}/hived.pid\n"
      end
      print "SUCCESS\n"

      print "Moving daemon startup script ... "
      if system("sudo cp #{startup_script} /etc/init.d/hived") && system("sudo chmod 755 /etc/init.d/hived") && system("sudo cp #{config_file} /etc/hived.conf")
        print "SUCCESS\n"
      else
        daemons = false
        print "FAILED\n"
      end
    else
      #startup_script = '??'
      print "SKIPPED (not available on #{os})\n"
      startup_script = false
      daemons = false
      #print "FAILED\n"
      #puts "  Cannot set up daemons for '#{os}'"
    end
  else
    print "SKIPPED\n"
  end

  print "Executing 'bundle install' ... "
  if system("bash -l -c 'cd #{dir}; gem install bundler; bundle install' > #{dir}/bundle_install.out 2>&1")
    print "SUCCESS\n"
    File.delete("#{dir}/bundle_install.out")
  else
    print "FAILED\n"
    puts "See #{dir}/bundle_install.out for details"
    exit
  end

  puts ''
  puts 'Configuration required:'
  puts
  puts '  * Add to config/settings.yml'
  puts '      - scheduler'
  puts '      - hive_mind'
  puts '      - cert'
  puts '      - cafile'
  if mods.length > 0
    puts '  * Configure these modules in config/settings.yml'
    mods.each do |m|
      puts "      - #{m[:device]}"
    end
  end
  puts '  * Add to ~/.bashrc'
  puts "      - export HIVE_CONFIG=#{dir}/config"
  puts "      - export HIVE_RUNNER_PATH=#{dir}"
  puts '  * Add to ~/.bashrc if you want to point specific url'
  puts "      - export HIVE_CI_URL=http://host_address:3000"
  puts "      - export HIVE_MIND_URL=http://host_address:3001"
  if ! daemons
    if startup_script
      puts '  * Move daemons startup script to correct location'
      puts "      - File currently at '#{startup_script}'"
    end
  end
end

if headless
  options = {
    mods: [],
    daemons: ( os != 'Unknown' )
  }
  options[:ruby], nrubies = find_ruby true
else
  options = gather_options unless headless
end

options[:dir] = dir

setup_hive options
